language: c

compiler:
  - gcc

runtime:
  nodePool: shippable_shared_aarch64

# git clone depth
depth: 50

env:
  global:
    - secure: OuhkRMNLWCzMcJdPrUtvyo78/NqOtP1WHEfVViD5oCHIFr7rTjOTRFC+1Tcal//Z9XoqlGTBSfthqn6Z8QemqdljeVSXJgb9zXJMrq4Hl/hWrNhJ/M1m/rh30EQYnAzFyiTGN9yuzOLArLDq1Emv2dzDRpZybrx6FpSvo+hm3GQZNW55+KUu5uUoCsKZwSIjytgJPuec/sTOkV81OP2bszwqmvh+Xhb1UT4ukYlDKK3B+uggKc7MCnOWiYBkh5fsNmEjUiBS3tj4B2nD4rTv0isDucZJTe5aHbOFhjRi5Yh4yk4qxi4WqwOHYDTIU4rzEOuOKihVeo52IayuJE+4Iw==
  matrix:
    - LLVM_ENABLE_ASSERTIONS=ON
    - LLVM_ENABLE_ASSERTIONS=OFF

build:
  ci:
    # Install prerequisites
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get -q update
    - apt-get -yq install git-core cmake ninja-build binutils-dev python p7zip-full curl
    # Build & install LLVM incl. LLD, compiler-rt and the Khronos SPIRV-LLVM-Translator
    - cmake --version
    - ninja --version
    - mkdir build
    - cd build
    - |
      cmake -G Ninja ../llvm \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=$PWD/../install \
        -DLLVM_ENABLE_PROJECTS='compiler-rt;lld' \
        -DLLVM_TARGETS_TO_BUILD="AArch64;ARM;WebAssembly" \
        -DLLVM_ENABLE_ASSERTIONS=$LLVM_ENABLE_ASSERTIONS \
        -DLLVM_ENABLE_UNWIND_TABLES=OFF \
        -DLLVM_ENABLE_TERMINFO=OFF \
        -DLLVM_ENABLE_LIBEDIT=OFF \
        -DCOMPILER_RT_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DCOMPILER_RT_USE_LIBCXX=OFF \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_STATIC_LINK_CXX_STDLIB=ON
    - ninja -j64 install
    - cd ..
    # Pack installation dir
    - |
      set -eo pipefail
      if [ "$IS_GIT_TAG" = "true" ]; then
        artifactID=${GIT_TAG_NAME:5}
      else
        artifactID=${COMMIT:0:8}
      fi
      assertsSuffix=""
      if [ "$LLVM_ENABLE_ASSERTIONS" = "ON" ]; then
        assertsSuffix="-withAsserts"
      fi
      artifactName=llvm-$artifactID-linux-aarch64$assertsSuffix
      mv install $artifactName
      artifact=$artifactName.tar.xz
      echo "Packing $artifact..."
      tar -cf - $artifactName | 7za a $artifact -si -txz -mx9
      ls -lh $artifact
    # Upload to GitHub release (only for branches and tags, no PRs)
    - |
      set -e
      if [ "$IS_PULL_REQUEST" = "true" ]; then
        echo 'Skipping deployment'
      else
        if [ "$IS_GIT_TAG" = "false" ]; then
          releaseTag=CI
        else
          releaseTag=$GIT_TAG_NAME
        fi
        releaseID=$(curl -s https://api.github.com/repos/ldc-developers/llvm-project/releases/tags/$releaseTag | grep -m 1 '^  "id":')
        releaseID=${releaseID:8:-1}
        echo "Uploading $artifact to GitHub release $releaseTag ($releaseID)..."
        curl -s \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @$artifact \
          https://uploads.github.com/repos/ldc-developers/llvm-project/releases/$releaseID/assets?name=$artifact
      fi

integrations:
  notifications:
    - integrationName: email
      type: email
      on_success: never
      on_failure: never
      on_cancel: never
      on_pull_request: never
