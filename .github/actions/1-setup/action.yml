name: Install prerequisites
inputs:
  clang_version:
    required: true
  arch:
    required: true
runs:
  using: composite
  steps:

    - name: 'Linux: Install required apt packages'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -q update
        sudo -E apt-get -yq install \
          git-core curl xz-utils ninja-build g++ python3 pkgconf binutils-dev libxml2-dev libzstd-dev zlib1g-dev p7zip-full unzip

        # install a recent CMake version (Ubuntu 20's too old)
        curl -fL --retry 3 --max-time 300 -o cmake.tar.gz \
          https://github.com/Kitware/CMake/releases/download/v3.31.4/cmake-3.31.4-linux-${{ inputs.arch }}.tar.gz
        mkdir cmake
        tar -xf cmake.tar.gz --strip 1 -C cmake
        rm cmake.tar.gz
        sudo ln -sf $PWD/cmake/bin/cmake /usr/bin/cmake

    - name: 'Linux: Download & extract clang' # into ../clang
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        version='${{ inputs.clang_version }}'
        arch='${{ inputs.arch }}'
        extraSuffix=''
        if [[ $arch == x86_64 ]]; then
          extraSuffix='-ubuntu-18.04'
        fi
        curl -fL --retry 3 --max-time 300 -o clang.tar.xz \
          https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang+llvm-$version-$arch-linux-gnu$extraSuffix.tar.xz
        mkdir clang
        tar -xf clang.tar.xz --strip 1 -C clang
        rm clang.tar.xz
        clang/bin/clang --version

        # use it as C(++) compiler for future steps
        echo "CC=$PWD/clang/bin/clang" >> $GITHUB_ENV
        echo "CXX=$PWD/clang/bin/clang++" >> $GITHUB_ENV

        # make bundled lld the default linker
        sudo ln -sf "$PWD/clang/bin/ld.lld" /usr/bin/ld
        ld --version
    - name: 'Windows: Install clang'
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 300 -o clang.exe \
          https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.clang_version }}/LLVM-${{ inputs.clang_version }}-win64.exe
        ./clang.exe //S # double-slash for bash
        rm clang.exe

        # C:\Program Files\LLVM\bin should already be in PATH
        clang-cl --version

        # use it as C(++) compiler for future steps
        echo "CC=clang-cl" >> $GITHUB_ENV
        echo "CXX=clang-cl" >> $GITHUB_ENV

        if [[ '${{ inputs.arch }}' == x86 ]]; then
          # make CMake configure 64-bit clang-cl for 32-bit code emission
          echo "CFLAGS=-m32" >> $GITHUB_ENV
          echo "CXXFLAGS=-m32" >> $GITHUB_ENV
          echo "ASMFLAGS=-m32" >> $GITHUB_ENV
        fi

    - name: 'Non-Linux: Install ninja'
      if: runner.os != 'Linux'
      uses: seanmiddleditch/gha-setup-ninja@v4

    - name: 'Windows: Set LDC_VSDIR env variable'
      if: runner.os == 'Windows'
      shell: bash
      run: echo "LDC_VSDIR=$(vswhere -latest -property installationPath)" >> $GITHUB_ENV
