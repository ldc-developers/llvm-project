name: Install prerequisites
inputs:
  arch:
    required: true
runs:
  using: composite
  steps:

    - name: 'Linux: Install required apt packages'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get -q update
        sudo -E apt-get -yq install \
          git-core curl xz-utils g++ python3 pkgconf binutils-dev libxml2-dev libzstd-dev zlib1g-dev p7zip-full unzip \
          lsb-release wget software-properties-common gnupg # prerequisites of apt.llvm.org install script

        # install a more recent CMake version in the AArch64 container (Ubuntu 20's too old)
        arch='${{ inputs.arch }}'
        if [[ $arch == aarch64 ]]; then
          curl -fL --retry 3 --max-time 300 -o cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v3.31.4/cmake-3.31.4-linux-$arch.tar.gz
          mkdir cmake
          tar -xf cmake.tar.gz --strip 1 -C cmake
          rm cmake.tar.gz
          sudo ln -sf $PWD/cmake/bin/cmake /usr/bin/cmake
        fi

    - name: 'Linux: Install clang 19 from apt.llvm.org'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 30 -O https://apt.llvm.org/llvm.sh
        sudo bash llvm.sh 19

        # use it as C(++) compiler for future steps
        echo "CC=clang-19" >> $GITHUB_ENV
        echo "CXX=clang++-19" >> $GITHUB_ENV

        # make bundled lld the default linker
        sudo ln -sf ld.lld-19 /usr/bin/ld
        ld --version

    - name: 'Windows: Install clang v19.1.3 from GitHub'
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -eux
        cd ..
        curl -fL --retry 3 --max-time 300 -o clang.exe \
          https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.3/LLVM-19.1.3-win64.exe
        ./clang.exe //S # double-slash for bash
        rm clang.exe

        # C:\Program Files\LLVM\bin should already be in PATH
        clang-cl --version

        # use it as C(++) compiler for future steps
        echo "CC=clang-cl" >> $GITHUB_ENV
        echo "CXX=clang-cl" >> $GITHUB_ENV

        if [[ '${{ inputs.arch }}' == x86 ]]; then
          # make CMake configure 64-bit clang-cl for 32-bit code emission
          echo "CFLAGS=-m32" >> $GITHUB_ENV
          echo "CXXFLAGS=-m32" >> $GITHUB_ENV
          echo "ASMFLAGS=-m32" >> $GITHUB_ENV
        fi

    - name: Install ninja v1.12.1
      uses: Ahajha/gha-setup-ninja@69595b0cf872acdad8ce599142fbdc88724b9a2b

    - name: 'Windows: Set LDC_VSDIR env variable'
      if: runner.os == 'Windows'
      shell: bash
      run: echo "LDC_VSDIR=$(vswhere -latest -property installationPath)" >> $GITHUB_ENV
